{"version":3,"file":"static/js/257.31aeb87b.chunk.js","mappings":"qMAEaA,E,OAAgBC,GAAAA,IAAH,8Q,SCEbC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,iBAAiB,0BACjBC,WAAW,UACXC,MAAM,aAIb,C,8JChBYC,EAAsBV,EAAAA,GAAAA,QAAH,sFAMnBW,EAAaX,EAAAA,GAAAA,IAAH,iFAMVY,EAAYZ,EAAAA,GAAAA,IAAH,yCAITa,EAASb,EAAAA,GAAAA,EAAH,sEAKNc,EAAed,EAAAA,GAAAA,IAAH,6CAIZe,EAAYf,EAAAA,GAAAA,GAAH,mFAMTgB,EAAWhB,EAAAA,GAAAA,GAAH,+CAIRiB,GAAajB,EAAAA,EAAAA,IAAOkB,EAAAA,GAAPlB,CAAH,ub,oCCmDvB,EA1EqB,WAAO,IAAD,IACnBmB,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KACtCC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAAgCN,EAAAA,EAAAA,UAAS,IAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KACA,GAA0BR,EAAAA,EAAAA,UAAS,MAAnC,eAAOS,EAAP,KAAcC,EAAd,KACA,GAAkCV,EAAAA,EAAAA,WAAS,GAA3C,eAAOW,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,0GAErBF,GAAa,GAFQ,UAGEG,EAAAA,EAAAA,IAAejB,GAHjB,OAGfkB,EAHe,OAIfC,EAAYD,EAASb,OACrBe,EAAUF,EAASG,aAAaC,MAAM,KAAK,GAC3CC,EANe,yCAM4BL,EAASM,aAEtDN,IAAa,IACfN,EAAS,8BAEXN,EAAUa,GACVf,EAASc,GACTV,EAAQY,GACRV,EAAYa,GAdS,kDAgBrBX,EAAS,KAAMa,SAhBM,yBAkBrBX,GAAa,GAlBQ,6EAAH,qDAqBtBE,GACD,GAAE,CAAChB,IAEJ,IAAQ0B,EAAkCvB,EAAlCuB,MAAOC,EAA2BxB,EAA3BwB,SAAUC,EAAiBzB,EAAjByB,aAEzB,OACE,UAAC3C,EAAD,WACG0B,IAAS,uBAAG,gCACZE,IAAa,SAACrC,EAAA,EAAD,KACd,SAACgB,EAAD,CAAYqC,GAAIjC,EAAOkC,QAAvB,SAAgC,aAChC,4BACE,SAAC5C,EAAD,CAAY6C,IAAKtB,EAAUuB,IAAKN,KAChC,UAACvC,EAAD,YACE,0BACGuC,GACD,0BAAOnB,QAET,yBAAG,eAA4B,GAAfqB,GAAmBK,QAAQ,GAAG,SAC9C,wBAAI,cACJ,uBAAIN,KACJ,wBAAI,YACJ,SAACvC,EAAD,UAASiB,EAAO6B,KAAI,SAAAC,GAAE,OAAIA,EAAGC,IAAP,IAAaC,KAAK,gBAG5C,SAAChD,EAAD,WACE,UAACC,EAAD,YACE,SAACC,EAAD,WACE,SAAC,KAAD,CAAMsC,GAAG,OAAT,SAAgB,YAElB,SAACtC,EAAD,WACE,SAAC,KAAD,CAAMsC,GAAG,UAAT,SAAmB,oBAIzB,SAAC,EAAAS,SAAD,CAAUC,UAAU,yBAAK,eAAzB,UACE,SAAC,KAAD,QAIP,C","sources":["components/Loader/Loader.stuled.js","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 9999;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`;\n","import React from 'react';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.stuled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrapper>\n      <MagnifyingGlass\n        visible={true}\n        height=\"200\"\n        width=\"200\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"MagnifyingGlass-wrapper\"\n        glassColor=\"#c0efff\"\n        color=\"#3f51b5\"\n      />\n    </LoaderWrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieDetailsWrapper = styled.section`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 20px;\n`;\n\nexport const MovieImage = styled.img`\n  width: 200px;\n  height: auto;\n  margin-right: 20px;\n`;\n\nexport const MovieInfo = styled.div`\n  flex-grow: 1;\n`;\n\nexport const Genres = styled.p`\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n\nexport const LinksWrapper = styled.div`\n  margin-top: 20px;\n`;\n\nexport const LinksList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n  display: flex;\n`;\n\nexport const LinkItem = styled.li`\n  margin-right: 10px;\n`;\n\nexport const GoBackLink = styled(Link)`\n  display: inline-block;\n  padding: 10px 20px;\n  margin: 12px;\n  background-color: rgb(51, 51, 51);\n  color: rgb(255, 255, 255);\n  text-decoration: none;\n  font-weight: bold;\n  height: 24px;\n  line-height: 24px;\n  border-radius: 12px;\n  cursor: pointer;\n\n  &:hover {\n    color: black;\n    background-color: orange;\n    &:focus {\n      outline: none;\n      box-shadow: 0 0 0 2px black;\n    }\n  }\n`;\n","import { useEffect, useState, Suspense, useRef } from 'react';\nimport {\n  GoBackLink,\n  MovieDetailsWrapper,\n  MovieImage,\n  MovieInfo,\n  Genres,\n  LinksWrapper,\n  LinksList,\n  LinkItem,\n} from './MovieDetails.styled';\nimport { useLocation, Outlet, useParams, Link } from 'react-router-dom';\nimport { getDetailMovie } from 'fetch_api/fetch_api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const goBack = useRef(location.state?.from ?? '/');\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [date, setDate] = useState('');\n  const [urlImage, setUrlImage] = useState('');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchDetalsMovie = async () => {\n      try {\n        setIsLoading(true);\n        const getMovie = await getDetailMovie(movieId);\n        const getGenres = getMovie.genres;\n        const getDate = getMovie.release_date.split('-')[0];\n        const getUrl = `https://image.tmdb.org/t/p/w500${getMovie.poster_path}`;\n\n        if (getMovie === []) {\n          setError(`No information on the film`);\n        }\n        setGenres(getGenres);\n        setMovie(getMovie);\n        setDate(getDate);\n        setUrlImage(getUrl);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchDetalsMovie();\n  }, [movieId]);\n\n  const { title, overview, vote_average } = movie;\n\n  return (\n    <MovieDetailsWrapper>\n      {error && <p>Sorry, something went wrong</p>}\n      {isLoading && <Loader />}\n      <GoBackLink to={goBack.current}>Go back</GoBackLink>\n      <div>\n        <MovieImage src={urlImage} alt={title}></MovieImage>\n        <MovieInfo>\n          <h1>\n            {title}\n            <span>{date}</span>\n          </h1>\n          <p>User Score:{(vote_average * 10).toFixed(0)} %</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <Genres>{genres.map(el => el.name).join(' / ')}</Genres>\n        </MovieInfo>\n      </div>\n      <LinksWrapper>\n        <LinksList>\n          <LinkItem>\n            <Link to=\"cast\">Cast</Link>\n          </LinkItem>\n          <LinkItem>\n            <Link to=\"reviews\">Reviews</Link>\n          </LinkItem>\n        </LinksList>\n      </LinksWrapper>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </MovieDetailsWrapper>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["LoaderWrapper","styled","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClassName","glassColor","color","MovieDetailsWrapper","MovieImage","MovieInfo","Genres","LinksWrapper","LinksList","LinkItem","GoBackLink","Link","location","useLocation","goBack","useRef","state","from","movieId","useParams","useState","movie","setMovie","genres","setGenres","date","setDate","urlImage","setUrlImage","error","setError","isLoading","setIsLoading","useEffect","fetchDetalsMovie","getDetailMovie","getMovie","getGenres","getDate","release_date","split","getUrl","poster_path","message","title","overview","vote_average","to","current","src","alt","toFixed","map","el","name","join","Suspense","fallback"],"sourceRoot":""}