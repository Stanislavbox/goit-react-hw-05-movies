{"version":3,"file":"static/js/691.8244d798.chunk.js","mappings":"qMAEaA,E,OAAgBC,GAAAA,IAAH,8Q,SCEbC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,iBAAiB,0BACjBC,WAAW,UACXC,MAAM,aAIb,C,2LCjBYC,EAAgBV,EAAAA,GAAAA,IAAH,0CAIbW,EAAaX,EAAAA,GAAAA,KAAH,+CAIVY,EAAoBZ,EAAAA,GAAAA,IAAH,8FAMjBa,EAAkBb,EAAAA,GAAAA,EAAH,6DAKfc,EAAcd,EAAAA,GAAAA,MAAH,yFAMXe,EAAcf,EAAAA,GAAAA,MAAH,sIAQXgB,EAAehB,EAAAA,GAAAA,OAAH,4WAsBZiB,EAAYjB,EAAAA,GAAAA,GAAH,8VAkBTkB,EAAYlB,EAAAA,GAAAA,GAAH,oQ,SC4BtB,EAvFe,WACb,OAAsCmB,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCN,EAAAA,EAAAA,WAAS,GAAjD,eAAOO,EAAP,KAAqBC,EAArB,KACA,GAAgDR,EAAAA,EAAAA,UAAS,IAAzD,eAAOS,EAAP,KAAyBC,EAAzB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,+FACZC,EADY,UACAjB,EAAYkB,IAAI,oBADhB,QACgC,GADhC,SAIhBZ,GAAa,GAJG,UAKGa,EAAAA,EAAAA,IAASF,GALZ,OAKVG,EALU,OAMhBhB,EAAUgB,EAAKC,SACa,IAAxBD,EAAKC,QAAQC,OACfd,EAAS,UAAD,OAAWS,EAAX,gBAERT,EAAS,MAEXE,EAA8B,KAAdO,GAZA,kDAchBT,EAAS,KAAMe,SAdC,yBAgBhBjB,GAAa,GAhBG,6EAAH,qDAoBjBU,GACD,GAAE,CAAChB,KAEJe,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRE,EAAS,UAAGjB,EAAYkB,IAAI,oBAAnB,QAAmC,GAClDN,EAAoBK,EACrB,GAAE,CAACjB,IAiBJ,OACE,UAACV,EAAD,WACGe,IAAa,SAACxB,EAAA,EAAD,KAEd,UAACU,EAAD,CAAYiC,SAfK,SAAAC,GACnBA,EAAIC,iBACqB,KAArBf,GACFD,GAAgB,GAChBT,EAAe,CAAC,KAEhBS,GAAgB,GAChBT,EAAe,CAAEgB,UAAWN,IAE/B,EAMG,WACE,SAACjB,EAAD,UAAa,kBACb,SAACC,EAAD,CACEgC,KAAK,OACLC,MAAOjB,EACPkB,SAxBa,SAAAJ,GACnBb,EAAoBa,EAAIK,OAAOF,MAChC,KAwBK,SAAChC,EAAD,CAAc+B,KAAK,SAAnB,SAA4B,YAC1BlB,GAAgBF,IAChB,SAACf,EAAD,WACE,UAACC,EAAD,WAAiB,SACRkB,EAAiB,sBAMhC,SAACd,EAAD,UACGM,EAAO4B,KAAI,SAAAC,GAAK,OACf,SAAClC,EAAD,WACE,SAAC,KAAD,CAAMmC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMvB,GAAxC,SACGmB,EAAMK,SAFKL,EAAME,GADP,QAUxB,C","sources":["components/Loader/Loader.stuled.js","components/Loader/Loader.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 9999;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`;\n","import React from 'react';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.stuled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrapper>\n      <MagnifyingGlass\n        visible={true}\n        height=\"200\"\n        width=\"200\"\n        ariaLabel=\"MagnifyingGlass-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"MagnifyingGlass-wrapper\"\n        glassColor=\"#c0efff\"\n        color=\"#3f51b5\"\n      />\n    </LoaderWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const MoviesWrapper = styled.div`\n  display: flex;\n`;\n\nexport const SearchForm = styled.form`\n  margin-right: 50px;\n`;\n\nexport const NotFoundContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const NotFoundMessage = styled.p`\n  color: red;\n  font-weight: bold;\n`;\n\nexport const SearchLabel = styled.label`\n  display: block;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n\nexport const SearchInput = styled.input`\n  padding: 5px;\n  padding-left: 24px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 14px;\n`;\n\nexport const SearchButton = styled.button`\n  margin: 12px;\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: rgb(51, 51, 51);\n  font-weight: bold;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    color: black;\n    background-color: orange;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px black;\n  }\n`;\n\nexport const MovieList = styled.ul`\n  list-style: none;\n  width: 100%;\n  padding: 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 20px;\n  & a {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-decoration: none;\n    color: grey;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const MovieItem = styled.li`\n  width: 200px;\n  height: 100px;\n  background-color: #fff;\n  padding: 10px;\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  &:hover {\n    background-color: orange;\n    & a {\n      color: black;\n    }\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { getMovie } from 'fetch_api/fetch_api';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  MovieList,\n  MovieItem,\n  MoviesWrapper,\n  SearchForm,\n  SearchLabel,\n  SearchInput,\n  NotFoundMessage,\n  NotFoundContainer,\n  SearchButton,\n} from './Movies.styled';\n\nconst Movies = () => {\n  const [searchMovie, setSearchMovie] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isInputEmpty, setIsInputEmpty] = useState(true);\n  const [searchInputValue, setSearchInputValue] = useState('');\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const movieName = searchMovie.get('movieName') ?? '';\n\n      try {\n        setIsLoading(true);\n        const data = await getMovie(movieName);\n        setMovies(data.results);\n        if (data.results.length === 0) {\n          setError(`Movie '${movieName}' not found`);\n        } else {\n          setError(null);\n        }\n        setIsInputEmpty(movieName === '');\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovies();\n  }, [searchMovie]);\n\n  useEffect(() => {\n    const movieName = searchMovie.get('movieName') ?? '';\n    setSearchInputValue(movieName);\n  }, [searchMovie]);\n\n  const handleSearch = evt => {\n    setSearchInputValue(evt.target.value);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (searchInputValue === '') {\n      setIsInputEmpty(true);\n      setSearchMovie({});\n    } else {\n      setIsInputEmpty(false);\n      setSearchMovie({ movieName: searchInputValue });\n    }\n  };\n\n  return (\n    <MoviesWrapper>\n      {isLoading && <Loader />}\n\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchLabel>Movie search</SearchLabel>\n        <SearchInput\n          type=\"text\"\n          value={searchInputValue}\n          onChange={handleSearch}\n        />\n        <SearchButton type=\"submit\">Search</SearchButton>\n        {!isInputEmpty && error && (\n          <NotFoundContainer>\n            <NotFoundMessage>\n              Movie {searchInputValue} not found\n            </NotFoundMessage>\n          </NotFoundContainer>\n        )}\n      </SearchForm>\n\n      <MovieList>\n        {movies.map(movie => (\n          <MovieItem key={movie.id}>\n            <Link to={`${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </MovieItem>\n        ))}\n      </MovieList>\n    </MoviesWrapper>\n  );\n};\n\nexport default Movies;\n"],"names":["LoaderWrapper","styled","Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClassName","glassColor","color","MoviesWrapper","SearchForm","NotFoundContainer","NotFoundMessage","SearchLabel","SearchInput","SearchButton","MovieList","MovieItem","useSearchParams","searchMovie","setSearchMovie","useState","movies","setMovies","isLoading","setIsLoading","error","setError","isInputEmpty","setIsInputEmpty","searchInputValue","setSearchInputValue","location","useLocation","useEffect","fetchMovies","movieName","get","getMovie","data","results","length","message","onSubmit","evt","preventDefault","type","value","onChange","target","map","movie","to","id","state","from","title"],"sourceRoot":""}